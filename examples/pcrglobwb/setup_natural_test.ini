[globalOptions]

# Set the input directory map in an absolute path.
# - The input forcing and parameter directories will be relative to this. # YOU HAVE TO CHANGE THIS #
inputDir = ./RhineMeuse30min/

# Set the output directory in an absolute path. # YOU HAVE TO CHANGE THIS #
#~ outputDir = /home/inti/code/eWaterCycle/PCR-GLOBWB_amuse/output
outputDir = ./RhineMeuse30min_output/

# Map of clone (must be provided in PCRaster maps)
# - Spatial resolution and coverage are based on this map:
cloneMap = cloneMaps/RhineMeuse30min.map

# The area/landmask of interest:
landmask = None
# If None, area/landmask is limited for cells with ldd value.

# spin-up output directory
spinUpOutputDir = True

# netcdf attributes for output files:
institution = Department of Physical Geography, Utrecht University
title       = PCR-GLOBWB output
description = test version (by Edwin H. Sutanudjaja)

startTime = 2001-01-01
endTime   = 2010-12-31
# Format: YYYY-MM-DD ; The current model runs on the daily time step.

# spinning up options:
maxSpinUpsInYears = 20
minConvForSoilSto = 0.5
minConvForGwatSto = 0.5
minConvForChanSto = 0.5
minConvForTotlSto = 0.5

[meteoOptions]

# Set the forcing temperature and precipitation files (relative to inputDir)
precipitationNC = forcing/precipitation_2001to2010.nc
temperatureNC   = forcing/temperature_2001to2010.nc

# Method to calculate referencePotETP (reference potential evaporation+transpiration)
referenceETPotMethod = Hamon
# options are "Hamon" and "Input" ; If "Input", the netcdf input file must be given:
refETPotFileNC = UNDEFINED

[landSurfaceOptions]
debugWaterBalance = True

numberOfUpperSoilLayers = 2

topographyNC     = landSurface/topoPropertiesRhineMeuse30min.nc
soilPropertiesNC = landSurface/soilPropertiesRhineMeuse30min.nc

includeIrrigation = False

includeDomesticWaterDemand  = False
includeIndustryWaterDemand  = False
includeLivestockWaterDemand = False

[forestOptions]

name = forest
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           =  0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002

landCoverMapsNC  = landCover/forest/forestPropertiesRhineMeuse.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

cropCoefficientNC = landCover/forest/cropKC_forest_daily366.nc
interceptCapNC    = landCover/forest/interceptCap_forest_daily366.nc
coverFractionNC   = landCover/forest/coverFraction_forest_daily366.nc

# initial conditions:
interceptStorIni = 0.0
snowCoverSWEIni  = 0.0
snowFreeWaterIni = 0.0
topWaterLayerIni = 0.0
storUppIni       = 0.0
storLowIni       = 0.0
interflowIni     = 0.0

[grasslandOptions]

name = grassland
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           =  0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002

landCoverMapsNC  = landCover/grassland/grasslandPropertiesRhineMeuse.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

cropCoefficientNC = landCover/grassland/cropKC_grassland_daily366.nc
interceptCapNC    = landCover/grassland/interceptCap_grassland_daily366.nc
coverFractionNC   = landCover/grassland/coverFraction_grassland_daily366.nc

# initial conditions:
interceptStorIni = 0.0
snowCoverSWEIni  = 0.0
snowFreeWaterIni = 0.0
topWaterLayerIni = 0.0
storUppIni       = 0.0
storLowIni       = 0.0
interflowIni     = 0.0

[groundwaterOptions]

debugWaterBalance = True

# a netcdf file containing kSatAquifer (m/day), specificYield (dimensionless) and recessionCoeff (day-1)
groundwaterPropertiesNC = groundwater/groundwaterProperties.nc

# initial conditions:
storGroundwaterIni = initialConditions/storGroundwaterIni_2001-12-31.map

[routingOptions]

debugWaterBalance = True

lddMap      = routing/RhineMeuse_lddsound_30min.map
cellAreaMap = routing/RhineMeuse_cellarea30min.map
gradient    = routing/RhineMeuse_ChannelGradient-RVB_30min.map

# manning coefficient
manningsN   = 0.04

# routing method: (options are kinematicWave, simplifiedKinematicWave and accuTravelTime)
routingMethod = accuTravelTime

#~ # Maximum length of a sub time step in seconds (optional and only used if either kinematicWave or simplifiedKinematicWave is used)
#~ # - Note that too long sub time step may create water balance errors.
#~ # - Default values: 3600 seconds for 30 arcmin ; 720 seconds for 5 arcmin
#~ maxiumLengthOfSubTimeStep = 3600.
#~ maxiumLengthOfSubTimeStep = 720.

# lake and reservoir parameters
waterBodyInputNC = routing/waterBodiesRhineMeuse2001To2010.nc
onlyNaturalWaterBodies = True

# composite crop factors for WaterBodies:
cropCoefficientWaterNC = routing/cropCoefficientForOpenWaterRhineMeuse.nc
minCropWaterKC         = 0.20

# number of days (timesteps) that have been performed for spinning up initial conditions in the routing module (i.e. channelStorageIni, avgDischargeLongIni, avgDischargeShortIni, etc.)
timestepsToAvgDischargeIni     = 0.0
# Note that:
# - maximum number of days (timesteps) to calculate long term average flow values (default: 5 years = 5 * 365 days = 1825)
# - maximum number of days (timesteps) to calculate short term average values (default: 1 month = 1 * 30 days = 30)

# initial conditions:
waterBodyStorageIni            = 0.0
channelStorageIni              = 0.0
readAvlChannelStorageIni       = 0.0
avgDischargeLongIni            = 0.0
avgDischargeShortIni           = 0.0
m2tDischargeLongIni            = 0.0
avgBaseflowLongIni             = 0.0
riverbedExchangeIni            = 0.0
avgLakeReservoirInflowShortIni = 0.0
avgLakeReservoirOutflowLongIni = 0.0
#
# initial condition of sub-time step discharge (needed for estimating number of time steps in kinematic wave methods)
#~ subDischargeIni                = None

[reportingOptions]
# output files that will be written in the disk in netcdf files:
outDailyTotNC = discharge
outMonthTotNC = gwRecharge,totalGroundwaterAbstraction,groundwaterAbsReturnFlow,totalRunoff,baseflow,totalEvaporation,desalinationAbstraction,surfaceWaterAbstraction,nonFossilGroundwaterAbstraction,fossilGroundwaterAbstraction,irrGrossDemand,nonIrrGrossDemand,totalGrossDemand,nonIrrWaterConsumption,nonIrrReturnFlow,runoff,actualET
outMonthAvgNC = accuBaseflow,discharge,gwRecharge,totalGroundwaterAbstraction,groundwaterAbsReturnFlow,totalRunoff,snowCoverSWE,fractionTotalEvaporation,fracSurfaceWaterAllocation,storGroundwater,storGroundwaterFossil,totalWaterStorageThickness,satDegUpp,satDegLow,interceptStor,snowFreeWater,snowCoverSWE,topWaterLayer,storUppTotal,storLowTotal
outMonthEndNC = storGroundwater,storGroundwaterFossil,totalActiveStorageThickness,totalWaterStorageThickness
outAnnuaTotNC = gwRecharge,totalRunoff,baseflow,totalEvaporation,desalinationAbstraction,surfaceWaterAbstraction,nonFossilGroundwaterAbstraction,fossilGroundwaterAbstraction,totalGroundwaterAbstraction,totalAbstraction,irrGrossDemand,nonIrrGrossDemand,totalGrossDemand,nonIrrWaterConsumption,nonIrrReturnFlow,runoff,actualET
outAnnuaAvgNC = accuBaseflow,storGroundwater,storGroundwaterFossil,storGroundwaterTotal,totalActiveStorageThickness,totalWaterStorageThickness,discharge,fractionTotalEvaporation
outAnnuaEndNC = storGroundwater,storGroundwaterFossil,storGroundwaterTotal,totalActiveStorageThickness,totalWaterStorageThickness
# netcdf format and zlib setup
formatNetCDF = NETCDF4
zlib = True

