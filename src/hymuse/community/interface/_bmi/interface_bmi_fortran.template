module bmi_model

  use BMI_MODULE

  type (BMI_TYPE) :: model

end module

function initialize(config_file) result(ret)
  use bmi_model
  integer :: ret
  character(len=*), intent(in) :: config_file
  
  ret=model%initialize(trim(config_file))
  
end function

function update() result(ret)
  use bmi_model
  integer :: ret
 
  ret=model%update()
  
end function

function update_until(t) result(ret)
  use bmi_model
  integer :: ret
  double precision, intent(in) :: t
 
  ret=model%update_until(t)
  
end function

function update_frac(t) result(ret)
  use bmi_model
  integer :: ret
  double precision, intent(in) :: t
 
  ret=model%update_frac(t)
  
end function

function finalize() result(ret)
  use bmi_model
  integer :: ret
 
  ret=model%finalize()
  
end function

function get_component_name(x) result(ret)
  use bmi_model
  use bmif_1_2, only: BMI_MAX_COMPONENT_NAME
  integer :: ret
  character(len=BMI_MAX_COMPONENT_NAME), intent(out) :: x
  character(len=BMI_MAX_COMPONENT_NAME), pointer :: x_
 
  ret=model%get_component_name(x_)
  
  x=x_
  
end function

function get_output_var_name_count(n) result(ret)
  use bmi_model
  use bmif_1_2, only: BMI_MAX_VAR_NAME
  integer :: ret
  integer, intent(out) :: n
  character(len=BMI_MAX_VAR_NAME), pointer :: names(:)
  
  ret=model%get_output_var_names(names)
 
  if(ret.EQ.BMI_SUCCESS) then
    n=size(names)
  endif

end function

function get_output_var_name(i, x) result(ret)
  use bmi_model
  use bmif_1_2, only: BMI_MAX_VAR_NAME
  integer :: ret
  integer, intent(in) :: i 
  character(len=*), intent(out) :: x
  character(len=BMI_MAX_VAR_NAME), pointer :: names(:)
 
  ret=model%get_output_var_names(names)
 
  if(ret.EQ.BMI_SUCCESS) then
    x=names(i+1)
  endif
  
end function

function get_input_var_name_count(n) result(ret)
  use bmi_model
  use bmif_1_2, only: BMI_MAX_VAR_NAME
  integer :: ret
  integer, intent(out) :: n
  character(len=BMI_MAX_VAR_NAME), pointer :: names(:)
  
  ret=model%get_input_var_names(names)
 
  if(ret.EQ.BMI_SUCCESS) then
    n=size(names)
  endif
  
end function

function get_input_var_name(i, x) result(ret)
  use bmi_model
  use bmif_1_2, only: BMI_MAX_VAR_NAME
  integer :: ret
  integer, intent(in) :: i
  character(len=*), intent(out) :: x
  character(len=BMI_MAX_VAR_NAME), pointer :: names(:)
 
  ret=model%get_input_var_names(names)
  if(ret.EQ.BMI_SUCCESS) then
    x=names(i+1)  ! input index has python convention (starting at zero)
  endif
  
end function

function get_start_time(t) result(ret)
  use bmi_model
  integer :: ret
  double precision, intent(out) :: t
 
  ret=model%get_start_time(t)
  
end function

function get_end_time(t) result(ret)
  use bmi_model
  integer :: ret
  double precision, intent(out) :: t
 
  ret=model%get_end_time(t)
  
end function

function get_current_time(t) result(ret)
  use bmi_model
  integer :: ret
  double precision, intent(out) :: t
 
  ret=model%get_current_time(t)
  
end function

function get_time_step(t) result(ret)
  use bmi_model
  integer :: ret
  double precision, intent(out) :: t
 
  ret=model%get_time_step(t)
  
end function

function get_time_units(x) result(ret)
  use bmi_model
  integer :: ret
  character(len=*), intent(out) :: x
 
  ret=model%get_time_units(x)
  
end function

function get_var_type(var, vartype) result(ret)
  use bmi_model
  integer :: ret
  character(len=*), intent(in) :: var
  character(len=*), intent(out) :: vartype
 
  ret=model%get_var_type(var,vartype)
  
end function

function get_var_units(var, varunit) result(ret)
  use bmi_model
  integer :: ret
  character(len=*), intent(in) :: var
  character(len=*), intent(out) :: varunit
 
  ret=model%get_var_units(var,varunit)
  
end function

function get_var_itemsize(var, x) result(ret)
  use bmi_model
  integer :: ret
  character(len=*), intent(in) :: var
  integer, intent(out) :: x
 
  ret=model%get_var_itemsize(var,x)
  
end function

function get_var_nbytes(var, x) result(ret)
  use bmi_model
  integer :: ret
  character(len=*), intent(in) :: var
  integer, intent(out) :: x
 
  ret=model%get_var_nbytes(var,x)
  
end function

function get_var_grid(var, x) result(ret)
  use bmi_model
  integer :: ret
  character(len=*), intent(in) :: var
  integer, intent(out) :: x
 
  ret=model%get_var_grid(var,x)
  
end function

function get_value_at_indices_float(var, indices, values, n) result(ret)
  use bmi_model
  integer :: ret,n
  character(len=*), intent(in) :: var(n)
  integer, intent(in) :: indices(n)
  double precision, intent(out) :: values(n)
  real :: values_(n)
 
  ret=model%get_value_at_indices_float(var(1),values_,indices)
  
  if(ret.EQ.BMI_SUCCESS) then
    values=values_
  endif
  
end function

function set_value_at_indices_float(var, indices, values, n) result(ret)
  use bmi_model
  integer :: ret,n
  character(len=*), intent(in) :: var(n)
  integer, intent(in) :: indices(n)
  double precision, intent(in) :: values(n)
  real :: values_(n)
 
  values_=values
  ret=model%set_value_at_indices_float(var(1),indices,values_)
  
end function

function get_grid_rank(grid_id, rank) result(ret)
  use bmi_model
  integer :: ret
  integer, intent(in) :: grid_id
  integer, intent(out) :: rank
 
  ret=model%get_grid_rank(grid_id,rank)
  
end function

function get_grid_size(grid_id, grid_size) result(ret)
  use bmi_model
  integer :: ret
  integer, intent(in) :: grid_id
  integer, intent(out) :: grid_size
 
  ret=model%get_grid_size(grid_id,grid_size)
  
end function

function get_grid_type(grid_id, grid_type) result(ret)
  use bmi_model
  integer :: ret
  integer, intent(in) :: grid_id
  character(len=*), intent(out) :: grid_type
 
  ret=model%get_grid_type(grid_id,grid_type)
  
end function

function get_grid_shape(grid_id, griddim, grid_size) result(ret)
  use bmi_model
  integer :: ret, get_grid_rank
  integer, intent(in) :: grid_id, griddim
  integer, intent(out) :: grid_size
  integer :: rank
  integer, allocatable :: size_(:)
 
  ret=get_grid_rank(grid_id,rank)
  
  if(griddim.LT.0.OR.griddim.GT.rank+1) then
    ret=BMI_FAILURE
  endif
  
  if(ret.EQ.BMI_SUCCESS) then
    allocate(size_(rank))
 
    ret=model%get_grid_shape(grid_id, size_)
    
    if(ret.EQ.BMI_SUCCESS) then
      grid_size=size_(griddim+1)
    endif
    
    deallocate(size_)

  endif

end function

function get_grid_spacing(grid_id, griddim, grid_spacing) result(ret)
  use bmi_model
  integer :: ret, get_grid_rank
  integer, intent(in) :: grid_id, griddim
  double precision, intent(out) :: grid_spacing
  integer :: rank
  double precision, allocatable :: spacing_(:)
 
  ret=get_grid_rank(grid_id,rank)

  if(griddim.LT.1.OR.griddim.GT.rank) then
    ret=BMI_FAILURE
  endif

  
  if(ret.EQ.BMI_SUCCESS) then
    allocate(spacing_(rank))
 
    ret=model%get_grid_spacing(grid_id, spacing_)
    
    if(ret.EQ.BMI_SUCCESS) then
      grid_size=spacing_(griddim)
    endif
    
    deallocate(spacing_)

  endif

end function

function get_grid_origin(grid_id, griddim, grid_origin) result(ret)
  use bmi_model
  integer :: ret, get_grid_rank
  integer, intent(in) :: grid_id, griddim
  double precision, intent(out) :: grid_origin
  integer :: rank
  double precision, allocatable :: origin_(:)
 
  ret=get_grid_rank(grid_id,rank)

  if(griddim.LT.1.OR.griddim.GT.rank) then
    ret=BMI_FAILURE
  endif
  
  if(ret.EQ.BMI_SUCCESS) then
    allocate(origin_(rank))
 
    ret=model%get_grid_origin(grid_id, origin_)
    
    if(ret.EQ.BMI_SUCCESS) then
      grid_size=origin_(griddim)
    endif
    
    deallocate(origin_)

  endif

end function

function get_grid_x(grid_id, indices, x, n) result(ret)
  use bmi_model
  integer :: ret,n, k, get_grid_shape
  integer, intent(in) :: grid_id(n)
  integer, intent(in) :: indices(n)
  double precision, intent(out) :: x(n)
  double precision, allocatable :: x_(:)

  ret=get_grid_shape(grid_id(1),1,k)

  if(ret.EQ.BMI_SUCCESS) then
    allocate(x_(k))

    ret=model%get_grid_x(grid_id(1), x_)

    if(ret.EQ.BMI_SUCCESS) then
      x(1:n)=x_(indices(1:n))
    endif
    
    deallocate(x_)
  endif

end function
  
function get_grid_y(grid_id, indices, x, n) result(ret)
  use bmi_model
  integer :: ret,n, k, get_grid_shape
  integer, intent(in) :: grid_id(n)
  integer, intent(in) :: indices(n)
  double precision, intent(out) :: x(n)
  double precision, allocatable :: x_(:)

  ret=get_grid_shape(grid_id(1),2,k)

  if(ret.EQ.BMI_SUCCESS) then
    allocate(x_(k))

    ret=model%get_grid_y(grid_id(1), x_)

    if(ret.EQ.BMI_SUCCESS) then
      x(1:n)=x_(indices(1:n))
    endif
    
    deallocate(x_)
  endif

end function

function get_grid_z(grid_id, indices, x, n) result(ret)
  use bmi_model
  integer :: ret,n, k, get_grid_shape
  integer, intent(in) :: grid_id(n)
  integer, intent(in) :: indices(n)
  double precision, intent(out) :: x(n)
  double precision, allocatable :: x_(:)

  ret=get_grid_shape(grid_id(1),3,k)

  if(ret.EQ.BMI_SUCCESS) then
    allocate(x_(k))

    ret=model%get_grid_z(grid_id(1), x_)

    if(ret.EQ.BMI_SUCCESS) then
      x(1:n)=x_(indices(1:n))
    endif
    
    deallocate(x_)
  endif

end function
